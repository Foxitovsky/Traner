// –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
const loginScreen = document.getElementById('loginScreen');
const appScreen = document.getElementById('appScreen');
const loginForm = document.getElementById('loginForm');
const timer = document.getElementById('timer');
const phase = document.getElementById('phase');
const startStopBtn = document.getElementById('startStopBtn');
const pauseBtn = document.getElementById('pauseBtn');
const progressBar = document.getElementById('progressBar');
const historyDiv = document.getElementById('history');
const soundToggle = document.getElementById('soundToggle');
const logoutBtn = document.getElementById('logoutBtn');
const beepSound = document.getElementById('beepSound');
const phaseEndSound = document.getElementById('phaseEndSound');
const iosSoundAlert = document.getElementById('iosSoundAlert');

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let currentUser = localStorage.getItem('workoutUser') || null;
let timerInterval = null;
let isRunning = false;
let isPaused = false;
let currentPhase = 'ready';
let timeLeft = 60;
let totalWorkoutTime = 0;
let soundEnabled = true;
let pausedTimeLeft = 0;
let pauseStartTime = 0;
let isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) || (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);
let audioContextInitialized = false;


// –§–∞–∑—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
const phases = {
    warmup: { duration: 60, name: '–†–∞–∑–º–∏–Ω–∫–∞', next: 'intense' },
    intense: { duration: 30, name: '–ò–Ω—Ç–µ–Ω—Å–∏–≤', next: 'rest' },
    rest: { duration: 60, name: '–û—Ç–¥—ã—Ö', next: 'intense' }
};

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ –¥–ª—è iOS
function initAudioForIOS() {
    if (!isIOS || audioContextInitialized) return;
    
    // –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ–±—É—Ñ–µ—Ä –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞—É–¥–∏–æ
    const initAudio = () => {
        const context = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = context.createOscillator();
        oscillator.connect(context.destination);
        oscillator.start();
        oscillator.stop(context.currentTime + 0.1);
        audioContextInitialized = true;
    };
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    iosSoundAlert.classList.remove('hidden');
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–∞—Å–∞–Ω–∏—è
    const enableAudio = () => {
        initAudio();
        iosSoundAlert.classList.add('hidden');
        document.body.removeEventListener('click', enableAudio);
        document.body.removeEventListener('touchend', enableAudio);
    };
    
    document.body.addEventListener('click', enableAudio, { once: true });
    document.body.addEventListener('touchend', enableAudio, { once: true });
}

// –§—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞
function playSound(sound) {
    if (!soundEnabled) return;
    
    try {
        sound.currentTime = 0;
        const playPromise = sound.play();
        
        if (playPromise !== undefined) {
            playPromise.catch(error => {
                if (isIOS && !audioContextInitialized) {
                    iosSoundAlert.classList.remove('hidden');
                    setTimeout(() => iosSoundAlert.classList.add('hidden'), 3000);
                }
                console.log('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
            });
        }
    } catch (error) {
        console.log('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    if (currentUser) {
        loginScreen.classList.add('hidden');
        appScreen.classList.remove('hidden');
        loadHistory();
    }
    
    if (isIOS) {
        initAudioForIOS();
    }
    
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('js/sw.js')
            .then(registration => {
                console.log('ServiceWorker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
            })
            .catch(err => {
                console.log('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ServiceWorker:', err);
            });
    }
});


// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
soundToggle.addEventListener('click', () => {
    soundEnabled = !soundEnabled;
    soundToggle.textContent = soundEnabled ? 'üîä' : 'üîá';
});

// –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
loginForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
    
    try {
        const response = await fetch('api/login.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username, password })
        });
        
        const data = await response.json();
        
        if (data.success) {
            currentUser = username;
            localStorage.setItem('workoutUser', username);
            loginScreen.classList.add('hidden');
            appScreen.classList.remove('hidden');
            loadHistory();
        } else {
            alert('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    }
});

// –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
logoutBtn.addEventListener('click', () => {
    localStorage.removeItem('workoutUser');
    currentUser = null;
    appScreen.classList.add('hidden');
    loginScreen.classList.remove('hidden');
});

// –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø
startStopBtn.addEventListener('click', async () => {
    if (!isRunning) {
        startWorkout();
        startStopBtn.textContent = '–°—Ç–æ–ø';
        startStopBtn.classList.remove('start');
        startStopBtn.classList.add('stop', 'running');
        pauseBtn.classList.remove('hidden');
        pauseBtn.textContent = '–ü–∞—É–∑–∞';
        isPaused = false;
    } else {
        stopWorkout();
        startStopBtn.textContent = '–°—Ç–∞—Ä—Ç';
        startStopBtn.classList.remove('stop', 'running');
        startStopBtn.classList.add('start');
        pauseBtn.classList.add('hidden');
        isPaused = false;
        await saveSession();
    }
    isRunning = !isRunning;
});
// –ö–Ω–æ–ø–∫–∞ –ø–∞—É–∑—ã
pauseBtn.addEventListener('click', () => {
    if (isPaused) {
        // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        isPaused = false;
        pauseBtn.textContent = '–ü–∞—É–∑–∞';
        startStopBtn.classList.add('running');
        
        // –ü–µ—Ä–µ—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –ø–∞—É–∑—ã
        const now = new Date().getTime();
        const pausedDuration = now - pauseStartTime;
        timeLeft = pausedTimeLeft;
        
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
        clearInterval(timerInterval);
        timerInterval = setInterval(updateTimer, 1000);
    } else {
        // –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É
        isPaused = true;
        pauseBtn.textContent = '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å';
        startStopBtn.classList.remove('running');
        clearInterval(timerInterval);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        pausedTimeLeft = timeLeft;
        pauseStartTime = new Date().getTime();
    }
});

// –ù–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
function startWorkout() {
    currentPhase = 'warmup';
    timeLeft = phases.warmup.duration;
    phase.textContent = phases.warmup.name;
    totalWorkoutTime = 0;
    
    updateTimerDisplay();
    timerInterval = setInterval(updateTimer, 1000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
function updateTimer() {
    if (isPaused) return;
    
    timeLeft--;
    totalWorkoutTime++;
    
    if (timeLeft === 3) {
        playSound(beepSound);
    }
    
    updateTimerDisplay();
    
    const phaseDuration = phases[currentPhase].duration;
    const progress = ((phaseDuration - timeLeft) / phaseDuration) * 100;
    progressBar.style.width = `${progress}%`;
    
    if (timeLeft <= 0) {
        playSound(phaseEndSound);
        nextPhase();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
function updateTimerDisplay() {
    const minutes = Math.floor(timeLeft / 60);
    const seconds = timeLeft % 60;
    timer.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}

// –°–ª–µ–¥—É—é—â–∞—è —Ñ–∞–∑–∞
function nextPhase() {
    currentPhase = phases[currentPhase].next;
    timeLeft = phases[currentPhase].duration;
    phase.textContent = phases[currentPhase].name;
    progressBar.style.width = '0%';
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
function stopWorkout() {
    clearInterval(timerInterval);
    resetTimer();
}

// –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞
function resetTimer() {
    currentPhase = 'ready';
    timeLeft = phases.warmup.duration;
    phase.textContent = '–ì–æ—Ç–æ–≤ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ';
    timer.textContent = '01:00';
    progressBar.style.width = '0%';
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
async function saveSession() {
    if (!currentUser) return false;
    
    try {
        const response = await fetch('api/save_session.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                username: currentUser,
                duration: totalWorkoutTime,
                date: new Date().toISOString()
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            loadHistory();
            return true;
        } else {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', data.error);
            return false;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        return false;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
async function loadHistory() {
    if (!currentUser) return;
    
    try {
        const response = await fetch(`api/get_history.php?username=${currentUser}`);
        const data = await response.json();
        
        if (data.success && data.sessions) {
            displayHistory(data.sessions);
        } else {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', data.error || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
            historyDiv.innerHTML = '<p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏</p>';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        historyDiv.innerHTML = '<p>–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º</p>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
function displayHistory(sessions) {
    if (!sessions || sessions.length === 0) {
        historyDiv.innerHTML = '<p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</p>';
        return;
    }
    
    let html = '<h3>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</h3><ol>';
    sessions.slice(0, 5).forEach(session => {
        const date = new Date(session.date).toLocaleString();
        const minutes = Math.floor(session.duration / 60);
        const seconds = session.duration % 60;
        html += `<li>${date} - ${minutes} –º–∏–Ω ${seconds} —Å–µ–∫</li>`;
    });
    html += '</ol>';
    
    historyDiv.innerHTML = html;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
setInterval(() => {
    if (currentUser) {
        loadHistory();
    }
}, 30000);